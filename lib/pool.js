// Generated by CoffeeScript 1.3.3
(function() {
  var Pool, events, fork, path, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fork = require('child_process').fork;

  path = require('path');

  _ = require('underscore');

  events = require('events');

  module.exports = Pool = (function(_super) {

    __extends(Pool, _super);

    function Pool(file, options) {
      var defaults;
      this.file = file;
      if (options == null) {
        options = {};
      }
      defaults = {
        workers: 10
      };
      this.options = _.extend({}, defaults, options);
      if (this.file[0] !== '/') {
        this.file = path.join(process.cwd(), this.file);
      }
      this.queue = [];
      this.workers = [];
      this.available = [];
      this.busy = {};
    }

    Pool.prototype.push = function(task) {
      var w;
      if (this.available.length > 0) {
        w = this.available.pop();
      } else if (this.workers.length < this.options.workers) {
        this.workers.push(w = this.fork());
      }
      if (w) {
        return this.delegate(w, task);
      } else {
        this.queue.push(task);
        return this.emit('full');
      }
    };

    Pool.prototype.delegate = function(worker, task) {
      worker.send({
        name: 'task',
        payload: task
      });
      return this.busy[worker.pid] = worker;
    };

    Pool.prototype.findWork = function(worker) {
      if (this.queue.length > 0) {
        return this.delegate(worker, this.queue.pop());
      } else {
        this.available.push(worker);
        if (this.empty()) {
          return this.emit('empty');
        }
      }
    };

    Pool.prototype.full = function() {
      return this.available.length === 0 && this.workers.length === this.options.workers;
    };

    Pool.prototype.empty = function() {
      return this.available.length === this.workers.length;
    };

    Pool.prototype.pending = function() {
      return this.queue.length + (this.workers.length - this.available.length);
    };

    Pool.prototype.fork = function() {
      var worker,
        _this = this;
      worker = fork(path.join(__dirname, 'worker.js'), [
        this.file, JSON.stringify({
          coffee: this.options.coffee
        })
      ]);
      worker.on('message', function(msg) {
        switch (msg.name) {
          case 'done':
            _this.emit('task-complete');
            return _this.findWork(worker);
          case 'error':
            return _this.error(worker, msg.payload);
          case 'alive?':
            return '';
        }
      });
      worker.on('exit', function() {
        return _this.exit(worker);
      });
      return worker.on('disconnect', function() {
        return _this.exit(worker);
      });
    };

    Pool.prototype.exit = function(killed) {
      if (this.busy[killed.pid]) {
        delete this.busy[killed.pid];
      }
      this.available = this.available.filter(function(w) {
        return w.pid !== killed.pid;
      });
      return this.workers = this.workers.filter(function(w) {
        return w.pid !== killed.pid;
      });
    };

    Pool.prototype.error = function(worker, e) {
      if (this.options.error != null) {
        this.options.error(e);
        return this.findWork(worker);
      } else {
        return console.log(e);
      }
    };

    Pool.prototype.shutdown = function() {
      var w, _i, _len, _ref, _results;
      _ref = this.workers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        if (w.connected) {
          _results.push(w.disconnect());
        }
      }
      return _results;
    };

    return Pool;

  })(events.EventEmitter);

}).call(this);
